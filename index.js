// Git - система контроля версий.
// Он позволяет:
// - отслеживать изменения в файлах;
// - работать над одним проектом нескольким разработчикам не мешая друг другу;
// - и др.

// GitHub - облачное храгилище проектов (онлайн-хостинг репозиториев).
// Он позволяет:
// - размещать проекты в облачном хранилище;
// - делиться написанным кодом с другими разработчиками;
// - ограничивать доступ к проекту;
// - и др.

// Основные команды

// ls - показывает файлы и папки внутри локального репозитория.
// ls -a - показывает все файлы и папки (включая скрытые )внутри локального репозитория.
// clear - очистит консоль терминала.

// git--version - узнать установленную версию Git.
// git clone [URL с Github] - клонирует репозиторий с Github на локальный компьютер.
// git init - инициализирует локальный репозиторий.
// git remote -v - проверяет привязку между локальным репозиторием и удаленным репозиториеями.
// git remote add origin [URL с Github] - осуществляет привязку между локальным и удаленным репозиториеями.
// git config user.name - показывает имя разработчика.
// git config user.email - показывает электронную почту разработчика.
// git status - показывает текущее состояние репозитория.
// git add [название изменных файлов] - подготавливает файлы к записи и добавляет их в stage area выборочно.
// git add . - подготавливает все файлы к записи и добавляет их stage area.
// git commit - записывает подготовленные файлы.
// git commit -m "comment"- записывает подготовленные файлы с комментарием.
// git log - просмотр списка сделанных записей.
// git log --oneline - просмотр списка сделанных записей в укороченном виде.
// git push [ссылка на репозиторий или origin] [имя ветки] - отправка изменений на удаленный репозиторий.
// git reset [название файла] - удаление файлов из stage area.
// git reset --hard - удаление всех локальных изменений в файлах и откат до предыдущего коммита.
// git diff - просмотр измененных / добавленных / удаленных строк в файлах.
// git diff [имя файла] - просмотр измененных / добавленных / удаленных строк в указанном файле.


// .gitignore - список файлов/папок, которые будут игнорироваться Git и не попадут в удаленных репозиторий.


// Основы ветвления и слияния

// Ветки нужны для того, чтобы разделять код при работе над проектом.

// git branch - просмотр текущей ветки.
// git branch [название новой ветки] - создание новой ветки.
// git checkout [название ветки на которую переключаемся] - переключение на другую ветку.
